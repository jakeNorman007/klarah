package data

import (
	"database/sql"
	"{{.ProjectName}}/types"
)

type Store struct {
    db *sql.DB
}

func NewStore(db *sql.DB) *Store {
    return &Store{db: db}
}

func (s *Store) CreatePost(post types.Post) error {
    _, err := s.db.Query("INSERT INTO posts (description) VALUES($1)", post.Description)
    if err != nil {
        return err
    }

    return nil
}

func (s *Store) GetPosts() ([]*types.Post, error) {
    rows, err := s.db.Query("SELECT * FROM posts")
    if err != nil {
        return nil, err
    }

    posts := make([]*types.Post, 0)
    for rows.Next() {
        p, err := scanRowsIntoPost(rows)
        if err != nil {
            return nil, err
        }
        
        posts = append(posts, p)
    }

    return posts, nil
}

func (s *Store) GetPostById(id int) (*types.Post, error) {
    rows, err := s.db.Query("SELECT * FROM posts WHERE id = $1", id)
    if err != nil {
        return nil, err
    }

    p := new(types.Post)
    for rows.Next() {
        p, err = scanRowsIntoPost(rows)
        if err != nil {
            return nil, err
        }
    }

    return p, nil
}

func (s *Store) UpdatePostById(id int, description string) error {
    _, err := s.db.Query("UPDATE posts SET description = $1 WHERE id = $2", description, id)
    if err != nil {
        return err
    }

    return nil
}

func (s *Store) DeletePost(id int) error {
    _, err := s.db.Query("DELETE FROM posts WHERE id = $1", id)
    return err
}

func scanRowsIntoPost(rows *sql.Rows) (*types.Post, error) {
    post := new(types.Post)

    err := rows.Scan(
        &post.ID,
        &post.Description,
    )

    if err != nil {
        return nil, err
    }

    return post, nil
}
