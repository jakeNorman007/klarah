package routes

import (
	"strconv"
	"net/http"
	"github.com/gin-gonic/gin"
	"{{.ProjectName}}/types"
	"{{.ProjectName}}/handlers"
)

type Handler struct {
    store types.PostsStore 
}

func NewHandler(store types.PostsStore) *Handler {
    return &Handler{store: store}
}

func (h *Handler) ApiRoutes(r *gin.Engine) {
    r.GET("/", handlers.HelloWorldHandler)

    r.POST("/posts", h.HandleCreatePost)
    r.GET("/posts", h.HandleGetPosts)
    r.GET("/post/:id", h.HandleGetPostById)
    r.PUT("/post/:id", h.HandleUpdatePostById)
    r.DELETE("/post/:id", h.HandleDeletePost)
}

func (h *Handler)HandleCreatePost(c *gin.Context) {
    var post types.Post

    if err := c.Bind(&post); err != nil {
        c.JSON(http.StatusBadRequest, gin.H{"Error": "Invalid payload"})
    }

    if err := h.store.CreatePost(post); err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{"Error": "Failed to create post"})
    }

    c.JSON(http.StatusCreated, post)
}

func (h *Handler)HandleGetPosts(c *gin.Context) {
    posts, err := h.store.GetPosts()
    if err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{"Error": "Failed to get posts"})
    }

    c.JSON(http.StatusCreated, posts)
}

func (h *Handler)HandleGetPostById(c *gin.Context) {
    idStr := c.Param("id")
    id, err := strconv.Atoi(idStr)
    if err != nil {
        c.JSON(http.StatusBadRequest, gin.H{"Error": "Post id not found"})
    }

    post, err := h.store.GetPostById(id)
    if err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{"Error": err.Error()})
    }

    c.JSON(http.StatusOK, post)
}

func (h *Handler)HandleUpdatePostById(c *gin.Context) {
    type UpdateRequestBody struct {
        Description string `json:"description"`
    }

    idStr := c.Param("id")
    id, err := strconv.Atoi(idStr)
    if err != nil {
        c.JSON(http.StatusBadRequest, gin.H{"Error": "Post id not found"})
    }

    var updateRequestBody UpdateRequestBody
    if err := c.Bind(&updateRequestBody); err != nil {
        c.JSON(http.StatusBadRequest, gin.H{"Error": "Invalid request body"})
    }

    err = h.store.UpdatePostById(id, updateRequestBody.Description)
    if err != nil {
        c.JSON(http.StatusBadRequest, gin.H{"error": "Could not update post"})
    }

    c.JSON(http.StatusOK, gin.H{"Updated post id": id})
}

func (h *Handler)HandleDeletePost(c *gin.Context) {
    idStr := c.Param("id")
    id, err := strconv.Atoi(idStr)
    if err != nil {
        c.JSON(http.StatusBadRequest, gin.H{"Error": "Post id not found"})
    }

    if err := h.store.DeletePost(id); err != nil {
        return
    }

    c.JSON(http.StatusOK, gin.H{"Deleted post id": id})
}
