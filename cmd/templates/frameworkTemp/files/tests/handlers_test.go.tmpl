package tests

import (
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"
	"{{.ProjectName}}/handlers"
)

func TestHandler(t *testing.T) {
    request, err := http.NewRequest("GET", "/", nil)
    if err != nil {
        t.Fatalf("Could not create request: %v", err)
    }

    rr := httptest.NewRecorder()

    handler := http.HandlerFunc(handlers.HelloWorldHandler)
    handler.ServeHTTP(rr, request)

    if status := rr.Code; status != http.StatusOK {
        t.Errorf("Handler returned wrong stsus code: got %v, wanted %v", status, http.StatusOK)
    }
    
    if contentType := rr.Header().Get("Content-Type"); contentType != "application/json" {
        t.Errorf("Handler returned the wrong content type: got %v, want %v", contentType, "application/json")
    }

    expectedJSON := map[string]string{"Hello":"World"}

    var actualJSON map[string]string
    if err := json.NewDecoder(rr.Body).Decode(&actualJSON); err != nil {
        t.Fatalf("Could not decode response body: %v", err)
    }

    if !compareJSON(expectedJSON, actualJSON) {
        t.Errorf("Handler returned unexpected body: got %v, want %v", actualJSON, expectedJSON)
    }
}

func compareJSON(expected, actual map[string]string) bool {
    if len(expected) != len(actual) {
        return false
    }

    for k, v := range expected {
        if actualValue, ok := actual[k]; !ok || v != actualValue {
            return false
        }
    }

    return true
}
